/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/4QInxT14jDW
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Archivo } from 'next/font/google'
import { Libre_Franklin } from 'next/font/google'

archivo({
  subsets: ['latin'],
  display: 'swap',
})

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
// "use client"

import { JSX, SVGProps } from "react"
import { getProductsByCategory, getProductsByCategoryAndQuery, getProductsByQuery } from "@/actions/product"
import {  productDataGetting } from "@/types/product"
import ProductCard from "../functional/ProductCard"
import FunctionalPagination from "../functional/FunctionalPagination"
import { PackageIcon, AlertCircle } from "lucide-react"

export async function SearchPage({category,query,page}:{category:string,query:string,page:number}) {
  console.log('SearchPage called with:', {category, query, page})
  
  let queryProducts: productDataGetting;
  let searchType = '';

  // Determine search type and fetch products accordingly
  if (query && category) {
    // Search within specific category
    queryProducts = await getProductsByCategoryAndQuery({limit: 12, page: page, query: query, category});
    searchType = `Search results for "${query}" in ${category}`;
  } else if (query && !category) {
    // Search across all products
    queryProducts = await getProductsByQuery({limit: 12, page: page, query: query});
    searchType = `Search results for "${query}"`;
  } else if (!query && category) {
    // Browse category
    queryProducts = await getProductsByCategory({limit: 12, page: page, category});
    searchType = `Products in ${category}`;
  } else {
    // Default: show all products
    queryProducts = await getProductsByQuery({limit: 12, page: page, query: ''});
    searchType = 'All Products';
  }

  console.log('Search results:', queryProducts)

  // Transform the data to match expected structure
  const transformedProducts = queryProducts?.products?.map(product => ({
    ...product,
    name: (product as any).title, // Use title as name
    images: (product as any).image ? [(product as any).image] : [], // Convert single image to array
    thumbnail: (product as any).image, // Use image as thumbnail
  })) || []

  // Check if we got an error
  if (typeof queryProducts === 'string') {
    return (
      <div className="p-8">
        <div className="text-center py-12">
          <AlertCircle className="h-16 w-16 text-red-500 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-900 mb-4">Search Error</h2>
          <p className="text-red-500 text-lg mb-6">{queryProducts}</p>
          <p className="text-gray-600">Please try again with different search terms.</p>
        </div>
      </div>
    )
  }

  // No products found
  if (!transformedProducts || transformedProducts.length === 0) {
    return (
      <div className="p-8">
        <div className="text-center py-12">
          <PackageIcon className="h-16 w-16 text-gray-400 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-900 mb-4">No Products Found</h2>
          <p className="text-gray-600 text-lg mb-6">
            {query 
              ? `We couldn't find any products matching "${query}"`
              : `No products available in ${category}`
            }
          </p>
          <div className="space-y-4">
            <p className="text-gray-500">Try these suggestions:</p>
            <div className="flex flex-wrap justify-center gap-2">
              {['Sarees', 'Lehenga', 'Electronics', 'Jewelry', 'Fashion', "men's clothing", "women's clothing"].map((term) => (
                <a
                  key={term}
                  href={`/search?query=${encodeURIComponent(term)}`}
                  className="px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded-lg text-gray-700 transition-colors duration-200"
                >
                  {term}
                </a>
              ))}
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="p-6">
      {/* Search Stats */}
      <div className="flex items-center justify-between mb-6 pb-4 border-b border-gray-200">
        <div className="flex items-center gap-6 text-sm text-gray-600">
          <span className="flex items-center gap-2">
            <PackageIcon className="h-4 w-4" />
            {transformedProducts.length} product{transformedProducts.length !== 1 ? 's' : ''} found
          </span>
          {queryProducts.totalPages > 1 && (
            <span>Page {queryProducts.currentPage} of {queryProducts.totalPages}</span>
          )}
        </div>
      </div>

      {/* Products Grid */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 mb-8">
        {transformedProducts?.map((product, ind) => (
          <ProductCard key={product._id} product={product}/>
        ))}
      </div>

      {/* Pagination */}
      {queryProducts.totalPages > 1 && (
        <div className="flex justify-center pt-6 border-t border-gray-200">
          <FunctionalPagination 
            currentPage={queryProducts.currentPage} 
            totalPages={queryProducts.totalPages} 
          />
        </div>
      )}
    </div>
  )
}

function StarIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2" />
    </svg>
  )
}

function XIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  )
}
