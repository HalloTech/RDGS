/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/4QInxT14jDW
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Archivo } from 'next/font/google'
import { Libre_Franklin } from 'next/font/google'

archivo({
  subsets: ['latin'],
  display: 'swap',
})

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
// "use client"

import { JSX, SVGProps } from "react"
import { getProductsByCategoryAndQuery, getProductsByCategory } from "@/actions/product"
import {  productDataGetting } from "@/types/product"
import ProductCard from "../functional/ProductCard"
import FunctionalPagination from "../functional/FunctionalPagination"

export async function SearchPage({category,query,page}:{category:string,query:string,page:number}) {
  console.log('SearchPage called with:', {category, query, page})
  
  // Use getProductsByCategory for category filtering, getProductsByCategoryAndQuery for search with query
  const queryProducts:productDataGetting = query 
    ? await getProductsByCategoryAndQuery({limit:6,page:page,query:query,category})
    : await getProductsByCategory({limit:6,page:page,category})

  console.log('Category products response:', queryProducts)

  // Transform the data to match expected structure
  const transformedProducts = queryProducts?.products?.map(product => ({
    ...product,
    name: (product as any).title, // Use title as name
    images: (product as any).image ? [(product as any).image] : [], // Convert single image to array
    thumbnail: (product as any).image, // Use image as thumbnail
  })) || []

  // Check if we got an error or no products
  if (typeof queryProducts === 'string') {
    return (
      <section className="bg-muted py-12 px-6 md:px-12">
        <div className="max-w-[1500px] mx-auto">
          <h2 className="text-2xl font-bold mb-6">Category: {category}</h2>
          <div className="text-center py-8">
            <p className="text-red-500">Error: {queryProducts}</p>
          </div>
        </div>
      </section>
    )
  }

  if (!transformedProducts || transformedProducts.length === 0) {
    return (
      <section className="bg-muted py-12 px-6 md:px-12">
        <div className="max-w-[1500px] mx-auto">
          <h2 className="text-2xl font-bold mb-6">Category: {category}</h2>
          <div className="text-center py-8">
            <p>No products found in this category</p>
          </div>
        </div>
      </section>
    )
  }

  return (
    <>
      

        <section className="bg-muted py-12 px-6 md:px-12">
            <div className="max-w-[1500px] mx-auto">
                <h2 className="text-2xl font-bold mb-6">Category: {category}</h2>
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                {
                    transformedProducts?.map((product,ind)=>{
                    return(
                        <ProductCard key={product._id} product={product}/>
                    )
                    })
                }
                </div>
                <FunctionalPagination currentPage={queryProducts.currentPage} totalPages={queryProducts.totalPages} />
            </div>
        </section>


    </>
  )
}

function StarIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2" />
    </svg>
  )
}


function XIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  )
}
